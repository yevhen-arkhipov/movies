{"version":3,"file":"static/js/93.1e8a6ea3.chunk.js","mappings":"kRAEaA,EAAWC,EAAAA,GAAAA,GAAH,oKAURC,EAAWD,EAAAA,GAAAA,GAAH,gCAIRE,EAAUF,EAAAA,GAAAA,IAAH,oFACD,SAAAG,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAKPC,EAAYN,EAAAA,GAAAA,EAAH,qHACH,SAAAG,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IACT,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IACG,SAAAF,GAAC,OAAIA,EAAEC,MAAMG,UAAUC,CAAtB,IAIHC,EAAWT,EAAAA,GAAAA,EAAH,6DACN,SAAAG,GAAC,OAAIA,EAAEC,MAAMG,UAAUC,CAAtB,IAIHE,EAAYV,EAAAA,GAAAA,GAAH,mEAEP,SAAAG,GAAC,OAAIA,EAAEC,MAAMG,UAAUC,CAAtB,I,SCgBhB,EAtCa,WACX,OAA0BG,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,SAERE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAe,mCAAG,8GAEDC,EAAAA,EAAAA,IAAQJ,GAFP,OAEdK,EAFc,OAGpBN,EAASM,GAHW,gDAKpBC,QAAQC,MAAR,MALoB,yDAAH,qDAQrBJ,GACD,GAAE,CAACH,IAEJ,IAGMQ,EAAWV,EAAMW,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,UAAWC,EAAlB,EAAkBA,KAAMC,EAAxB,EAAwBA,aAAxB,OACzB,UAAC1B,EAAD,YACE,SAACC,EAAD,CACE0B,IAAKD,EAAY,UANJ,mCAMI,OAAmBA,GAJxC,6FAKIE,IAAKH,KAEP,SAACpB,EAAD,UAAYoB,KACZ,UAACjB,EAAD,yBAAsBgB,OANTD,EADU,IAW3B,OAAOZ,EAAMkB,OAAS,GACpB,UAAC/B,EAAD,eAAYuB,EAAZ,QAEA,SAACZ,EAAD,qDAEH,C,8LChDDqB,EAAAA,GAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAEVC,EAAU,UAKHC,EAAa,mCAAG,+GAEFH,EAAAA,GAAAA,IAAA,UANR,sBAMQ,oBAAsCC,IAFpC,uBAEjBb,EAFiB,EAEjBA,KAFiB,kBAGlBA,EAAKgB,SAHa,gCAKzBf,QAAQC,MAAR,MALyB,yDAAH,qDAkBbe,EAAY,mCAAG,WAAMZ,GAAN,kGAEDO,EAAAA,GAAAA,IAAA,UAClBE,GADkB,OACLT,EADK,oBACSQ,EADT,oBAFC,uBAEhBb,EAFgB,EAEhBA,KAFgB,kBAKjBA,GALiB,gCAOxBC,QAAQC,MAAR,MAPwB,yDAAH,sDAWZgB,EAAgB,mCAAG,WAAMC,GAAN,kGAELP,EAAAA,GAAAA,IAAA,UAjCV,gBAiCU,oBACKC,EADL,kBACsBM,EADtB,yBAFK,uBAEpBnB,EAFoB,EAEpBA,KAFoB,kBAKrBA,EAAKgB,SALgB,gCAO5Bf,QAAQC,MAAR,MAP4B,yDAAH,sDAWhBH,EAAO,mCAAG,WAAMM,GAAN,kGAEIO,EAAAA,GAAAA,IAAA,UAClBE,GADkB,OACLT,EADK,4BACiBQ,EADjB,oBAFJ,uBAEXb,EAFW,EAEXA,KAFW,kBAKZA,EAAKoB,MALO,gCAOnBnB,QAAQC,MAAR,MAPmB,yDAAH,sDAWPmB,EAAU,mCAAG,WAAMhB,GAAN,kGAECO,EAAAA,GAAAA,IAAA,UAClBE,GADkB,OACLT,EADK,4BACiBQ,EADjB,oBAFD,uBAEdb,EAFc,EAEdA,KAFc,kBAKfA,EAAKgB,SALU,gCAOtBf,QAAQC,MAAR,MAPsB,yDAAH,qD","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 33px;\n  margin: 20px auto;\n  padding: 0px;\n  list-style: none;\n`;\n\nexport const CastCard = styled.li`\n  // *\n`;\n\nexport const CastImg = styled.img`\n  margin-bottom: ${p => p.theme.space[1]}px;\n  width: 185px;\n  height: 278px;\n`;\n\nexport const CastTitle = styled.p`\n  margin-bottom: ${p => p.theme.space[0]}px;\n  width: ${p => p.theme.space[7]}px;\n  font-size: ${p => p.theme.fontSizes.s}px;\n  text-transform: uppercase;\n`;\n\nexport const CastText = styled.p`\n  font-size: ${p => p.theme.fontSizes.s}px;\n  width: 90px;\n`;\n\nexport const CastError = styled.h3`\n  margin: 20px auto;\n  font-size: ${p => p.theme.fontSizes.s}px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { GetCast } from 'services/api';\n\nimport {\n  CastList,\n  CastCard,\n  CastImg,\n  CastTitle,\n  CastText,\n  CastError,\n} from './Cast.styled';\n\nconst Cast = () => {\n  const [casts, setCasts] = useState([]);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchCastMovies = async () => {\n      try {\n        const data = await GetCast(movieId);\n        setCasts(data);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchCastMovies();\n  }, [movieId]);\n\n  const baseImgUrl = 'https://image.tmdb.org/t/p/w185';\n  const defaultImg =\n    'https://s1.hostingkartinok.com/uploads/images/2022/12/fdcb3e54ee7208718aa93f352df4f3a0.jpg';\n  const elements = casts.map(({ id, character, name, profile_path }) => (\n    <CastCard key={id}>\n      <CastImg\n        src={profile_path ? `${baseImgUrl}${profile_path}` : defaultImg}\n        alt={name}\n      />\n      <CastTitle>{name}</CastTitle>\n      <CastText>Character: {character}</CastText>\n    </CastCard>\n  ));\n\n  return casts.length > 0 ? (\n    <CastList> {elements} </CastList>\n  ) : (\n    <CastError>We don't have any actors for this movie</CastError>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'f770e26d26a9f8dc8d3f9af112edaff0';\n\nconst queryMovie = `/movie/`;\nconst queryTrending = `/trending/movie/day`;\nconst queryGenres = `/genre/movie/list`;\nconst querySearch = `/search/movie`;\n\nexport const TrendingMovie = async () => {\n  try {\n    const { data } = await axios.get(`${queryTrending}?api_key=${API_KEY}`);\n    return data.results;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const GetGenre = async () => {\n  try {\n    const { genres } = await axios.get(`${queryGenres}?api_key=${API_KEY}`);\n    return genres;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const GetMovieById = async id => {\n  try {\n    const { data } = await axios.get(\n      `${queryMovie}${id}?api_key=${API_KEY}&language=en-US`\n    );\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const GetMovieBySearch = async q => {\n  try {\n    const { data } = await axios.get(\n      `${querySearch}?api_key=${API_KEY}&query=${q}&include_adult=false`\n    );\n    return data.results;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const GetCast = async id => {\n  try {\n    const { data } = await axios.get(\n      `${queryMovie}${id}/credits?api_key=${API_KEY}&language=en-US`\n    );\n    return data.cast;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const GetReviews = async id => {\n  try {\n    const { data } = await axios.get(\n      `${queryMovie}${id}/reviews?api_key=${API_KEY}&language=en-US`\n    );\n    return data.results;\n  } catch (error) {\n    console.error(error);\n  }\n};\n"],"names":["CastList","styled","CastCard","CastImg","p","theme","space","CastTitle","fontSizes","s","CastText","CastError","useState","casts","setCasts","movieId","useParams","useEffect","fetchCastMovies","GetCast","data","console","error","elements","map","id","character","name","profile_path","src","alt","length","axios","API_KEY","queryMovie","TrendingMovie","results","GetMovieById","GetMovieBySearch","q","cast","GetReviews"],"sourceRoot":""}